{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\ftech\fcharset77 Symbol;\f2\fnil\fcharset0 Cambria;
}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri0\sl259\slmult1\sa160

\f0\fs24 \cf0 Dat Pham\
Review\
Program 1\
\
I/ Data Structure\
\pard\pardeftab720\fi720\ri0\sl259\slmult1\sa160
\cf0 We will create program with Linear Link List, and using LLL for display information from an external file. We designed total three Linear Link List such as vehicles list, type of car list and important information feature of car list\
\pard\pardeftab720\ri0\sl259\slmult1\sa160
\cf0      1 . Main design is Linear Link List\
	The Linear Link List displayed clear information from external file. In fact, we defined node include object vehicle and pointer next. Object vehicle include information about vehicle. Then, when we load information from external file, we will push information into vehicle object. Linear link list is really to make connection node together. \
	The Linear Link List of type car and feature car is also like LLL of vehicles. However, each node contains array character and pointer node. They have a little bit difference. The LLL of type car and feature help we can push many types of cars and many features of car for vehicle. It help vehicle have many information, and program one is useful.\
\pard\pardeftab720\fi720\ri0\sl259\slmult1\sa160
\cf0  The main design issue is insert vehicle into list of vehicle because we will use deep copy for array character. In addition, we know list type, and list feature vehicle is a LLL. Thus, we must use deep copy for LLL. In fact, we must copy from LLL to another LLL. This is really hard. \
\pard\pardeftab720\ri0\sl276\slmult1\sa160
\cf0 	We will be use both a head pointer and a tail pointer for all of linear link list of program one. Then, the special cases of the LLL is head and tail pointer is NULL when we add first node into LLL. In fact, the first time, the head and tail isn\'92t exist, so we will create head and tail pointer and push information for pointer. \
	                         \
\
\
 \
    2. A different data structure\
	We have many concepts data structure, we can using Double Link List or Circle Link List for instead LLL. The double link list use two pointer such as next and previous. Thus, we can retrieve or traversal better.\
In addition, we can use hash table for instead LLL. Using hash table, we can save more information better.\
II/ Abstract Data Type\
	We only make four class such as listTypeCar, listFeatureCar, vehicle and vehicle_list classes. The listTypeCar, listFeatureCar and vehicle_list are Linear Link List.\
	ADT in my design is useful because we can insert information from external file into vehicle list. In addition, ADT can display clear information with requirement program one. However, ADT include many functions with same mission, then reading can hard understand.\
	Moreover, with my design, client will communicate with abstract data type, and ADT will receive requirement from client. Then, ADT go to data and get information to return information to client. Therefore, client can\'92t see data, and client doesn\'92t know how we store the data (like array, list\'85). \
\pard\pardeftab720\ri0\sl259\slmult1\sa160
\cf0 III/ Efficient and not efficient\
\pard\pardeftab720\li720\fi-360\ri0\sl259\slmult1\sa160
\ls1\ilvl0
\f1\fs22 \cf0 \'a5	
\f0 Efficient: + My program one can display requirement of program one. Moreover, My design can control memory when we create and delete dynamically allocated array or object. \
\pard\pardeftab720\li1440\ri0\sl259\slmult1\sa160
\cf0    + In addition, I make good deep copy in program one.\
\pard\pardeftab720\li720\ri0\sl259\slmult1\sa160
\cf0 	   + only ADT can connect with data structure, and client can\'92t see data.\
\pard\pardeftab720\li720\fi-360\ri0\sl259\slmult1\sa160
\ls2\ilvl0
\f1 \cf0 \'a5	
\f0 Not efficient: because my degisn is using LLL, we can\'92t get information random node. In addition, if we need get information random node, we must traversal all of list. \
\pard\pardeftab720\ri0\sl259\slmult1\sa160
\cf0 IV/ Improvement\
	If we have more time, I will create more data, and I will improve some function is better. Moreover, I can create list of dream vehicles the customer need to have, and try to set up. In addition, I can try to make upgrade function for list vehicles. In fact, I will try to update information about vehicle and try to save into external file.\
\pard\pardeftab720\ri0\sl259\slmult1\sa160

\f2 \cf0 \
}